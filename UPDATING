Maintaining Mac OS X Frameworks for Aleph One

Dev environment: Xcode 3.2, 10.6 Snow Leopard
Compilation target: 32-bit Universal Binary, 10.4 Tiger

This guide assumes you've already worked out any kinks building the library
with the normal configure/make process. Take note of any special configure
flags, any defines passed to GCC, and which sources need to get built.


CREATING A NEW FRAMEWORK:

1. Project Setup

1a. Run the "new_project.sh" script, with the project name:
    
      > ./new_project.sh sample
    
    Name the project with the library name, not including the "lib" prefix.
    A project directory will be created with a default build_config.sh
    script and Xcode project file.

2. Config.h Generation

2a. Unpack a clean copy of the library source and place it in the project
    directory. Name the source directory "lib<project>", not including any
    version number.

2b. Edit the "build_config.sh" script as needed; options are at the top of
    the script. Run the script from the project directory:
    
      > ./build_config.sh
    
    This should create a "config" directory with a "config.h" file (or
    whatever the proper config.h name is).

3. Xcode Source Setup

3a. Add the generated config/config.h to the project, by right-clicking the
    "Sources" folder and choosing Add -> Existing Files...
    In the resulting options dialog:
      * Uncheck "Copy items into destination group's folder"
      * Check "<project>" under "Add To Targets"

3b. Add the other source and header files from "lib<project>" the same way.
    You can shift-click or command-click to add multiple files in one step.
    This is the most error-prone step, you may need to review the make
    process to ensure you get the correct files for the library itself.

3c. If additional header files are needed for framework use but not for
    compilation, add them to the "Other Sources" folder the same way. If an
    entire subdirectory should be added, you can choose the option "Create
    Folder References for added folders".

3d. Navigate in the sidebar to Targets -> <project> -> Copy Headers and
    change the "Role" column to "Public" for all headers that should be
    installed into the framework. This corresponds to the "make install"
    step.
    
    Note: files added at this step will be included at the top level of
    the framework's Headers directory. If subdirectories are needed, see
    step 3e.

3e. If a header directory structure is needed, add a "Copy Files" step by
    choosing Project -> New Build Phase -> New Copy Files Build Phase.
    Navigate in the sidebar to Targets -> <project> -> Copy Files,
    right-click to choose "Get Info", and switch to the General tab.
    
    Change "Destination" to "Wrapper"
    Change "Path" to "Headers" or a subdirectory, such as "Headers/sample"
    
    Drag the necessary header files or folder references onto the "Copy Files"
    icon to add them.

3f. The "HAVE_CONFIG_H" define is added to the project by default. If
    additional defines are needed, choose Project -> Edit Active Target,
    and switch to the Build tab. Add to the "Preprocessor Macros" setting
    as needed.

3g. Add necessary dependencies, such as libz. Right-click the "External
    Frameworks and Libraries" folder, and choose Add -> Existing Frameworks.
    This process works for both Mac Frameworks and standard dylibs.

4. Build

4a. Choose Build -> Build, and if you're lucky the build will succeed.

4b. The framework will be located in <project dir>/build/Release. You can
    copy this into /Library/Frameworks for use in Aleph One.


UPDATING A FRAMEWORK WITH FRESH SOURCES:

1. Unpack a clean copy of the latest source, as in step 2a above.

2. Update the "build_config.sh" script as necessary, and run as in step 2b
   above.

3. Add any new source files to the Xcode project, and update settings as
   needed, as described in steps 3a-3g above. If old files are obsolete,
   right-click on them in Xcode and choose "Delete".

4. Choose Build -> Clean, and click "Clean"

5. Build as in steps 4a-4b above.
